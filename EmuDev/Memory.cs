namespace EmuDev
{
    public class Memory
    {
        public byte[] Ram;
        public byte[] Registers;

        private static readonly byte[] Font =
        {
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0 
            0x20, 0x60, 0x20, 0x20, 0x70, // 1 
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2 
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3 
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4 
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5 
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7 
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8 
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9 
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A 
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B 
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C 
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D 
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E 
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F
        };

        public Memory()
        {
            Registers = new byte[16];
            Ram = new byte[4096];
            Array.Copy(Font, Ram, Font.Length);
        }

        public ushort ReadShort(int i)
        {
            return (ushort)((Ram[i] << 8) | Ram[i + 1]);
        }

        public void LoadRom(string filePath)
        {
            byte[] rom = File.ReadAllBytes(filePath);
            if (rom.Length > (Ram.Length - 0x200))
                throw new ArgumentException("Rom was too big.");
            Array.Copy(rom, 0, Ram, 0x200, rom.Length);
        }
    }
}